<?php

namespace Stereotec\DetailExtension;

use Doctrine\DBAL\Connection;
use Shopware\Core\Content\Media\Subscriber\MediaLoadedSubscriber;
use Shopware\Core\Framework\Context;
use Shopware\Core\Framework\Plugin;
use Shopware\Core\Framework\Plugin\Context\InstallContext;
use Shopware\Core\Framework\Plugin\Context\UninstallContext;
use Shopware\Core\Framework\Plugin\Context\UpdateContext;
use Shopware\Core\Framework\Uuid\Uuid;
use Shopware\Core\System\CustomField\CustomFieldTypes;
use Shopware\Storefront\Page\PageLoadedEvent;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

class DetailExtension extends Plugin
{
    private $customFieldSets = [
        [
            'id' => 'aacbcf9bedfb4827853b75c5fd278d3f',
            'name' => 'it_delight_set',
            'config' => [
                'label' => [
                    'en-GB' => 'Shoppingwelten verlinken',
                    'de-DE' => 'Shoppingwelten verlinken',
                ],
            ],
            'relation' => [
                'id' => '0f2e6036750a4eb98ffe7155be89a5a6',
                'entityName' => 'product',
            ],
        ]
    ];
    private $customFields = [
        [
            'id' => 'fe5f4e10cd1a4f6e9710207638c0c9eb',
            'name' => "it_delight_field",
            'type' => CustomFieldTypes::JSON,
            'customFieldSetId' => 'aacbcf9bedfb4827853b75c5fd278d3f',
            'config' => [
                'type' => 'select',
                'label' =>
                    [
                        'en-GB' => 'Shoppingwelten',
                    ],
                'customFieldType' => 'select',
                'customFieldPosition' => 1,


                'componentName' => 'sw-multi-select',
                'placeholder' => array
                (
                    'en-GB' => 'placeholder'
                ),

                'helpText' => array
                (
                    'en-GB' => 'helptext'
                )
            ]
        ],
    ];

    public function update(UpdateContext $updateContext): void
    {
        parent::update($updateContext); // TODO: Change the autogenerated stub
    }


    public function install(InstallContext $context): void
    {
        foreach ($this->customFieldSets as $customFieldSet) {
            $this->upsertCustomFieldSet($customFieldSet, $context->getContext());
        }
        foreach ($this->customFields as $customField) {
            $this->upsertCustomField($customField, $context->getContext());
        }
    }



    private function upsertCustomFieldSet(array $customFieldSet, Context $context): void
    {

        $customFieldSetRepository = $this->container->get('custom_field_set.repository');
        $data = [
            'id' => $customFieldSet['id'],
            'name' => $customFieldSet['name'],
            'config' => $customFieldSet['config'],
            'active' => true,
            'relations' => [
                [
                    'id' => $customFieldSet['relation']['id'],
                    'entityName' => $customFieldSet['relation']['entityName'],
                ],
            ],
        ];

        $customFieldSetRepository->upsert([$data], $context);
    }

    private function upsertCustomField(array $customField, Context $context): void
    {

        $db = $this->container->get(Connection::class);
        $sqlResult = $db->fetchAll("SELECT cms_page.id ,cms_page_translation.name FROM cms_page INNER JOIN cms_page_translation ON cms_page.id = cms_page_translation.cms_page_id
WHERE cms_page.type = 'landingpage'
");
        $data = [];
        foreach ($sqlResult as $result) {
            array_push($data, [
                'value' => Uuid::fromBytesToHex($result['id']),
                'label' => array
                (
                    'en-GB' => $result['name']
                )
            ]);
        }


        $customFieldRepository = $this->container->get('custom_field.repository');
        $customField['config']['options'] = $data;
        $data = [
            'id' => $customField['id'],
            'name' => $customField['name'],
            'type' => $customField['type'],
            'active' => true,
            'customFieldSetId' => $customField['customFieldSetId'],
            'config' => $customField['config']
        ];

        $customFieldRepository->upsert([$data], $context);
    }

    public function uninstall(UninstallContext $context): void
    {
        foreach ($this->customFieldSets as $customFieldSet) {
            $this->deactivateCustomFieldSet($customFieldSet, $context->getContext());
        }
        foreach ($this->customFields as $customField) {
            $this->deactivateCustomField($customField, $context->getContext());
        }
    }

    private function deactivateCustomField(array $customField, Context $context): void
    {
        $customFieldRepository = $this->container->get('custom_field.repository');
        $data = [
            'id' => $customField['id'],
            'name' => $customField['name'],
            'type' => $customField['type'],
            'active' => false,
            'customFieldSetId' => $customField['customFieldSetId'],
        ];

        $customFieldRepository->delete([$data], $context);
    }

    private function deactivateCustomFieldSet(array $customFieldSet, Context $context): void
    {
        $customFieldSetRepository = $this->container->get('custom_field_set.repository');
        $data = [
            'id' => $customFieldSet['id'],
            'name' => $customFieldSet['name'],
            'config' => $customFieldSet['config'],
            'active' => false,
            'relations' => [
                [
                    'id' => $customFieldSet['relation']['id'],
                    'entityName' => $customFieldSet['relation']['entityName'],
                ],
            ],
        ];

        $customFieldSetRepository->delete([$data], $context);
    }

}
